<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.test.bus.mapper.InportMapper" >
  <resultMap id="BaseResultMap" type="cn.test.bus.domain.Inport" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="paytype" property="paytype" jdbcType="VARCHAR" />
    <result column="inporttime" property="inporttime" jdbcType="VARCHAR" />
    <result column="operateperson" property="operateperson" jdbcType="VARCHAR" />
    <result column="number" property="number" jdbcType="INTEGER" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="inportprice" property="inportprice" jdbcType="DOUBLE" />
    <result column="providerid" property="providerid" jdbcType="INTEGER" />
    <result column="goodsid" property="goodsid" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, paytype, inporttime, operateperson, number, remark, inportprice, providerid, 
    goodsid
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from bus_inport
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from bus_inport
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.test.bus.domain.Inport" >
    insert into bus_inport (id, paytype, inporttime, 
      operateperson, number, remark, 
      inportprice, providerid, goodsid
      )
    values (#{id,jdbcType=INTEGER}, #{paytype,jdbcType=VARCHAR}, #{inporttime,jdbcType=VARCHAR}, 
      #{operateperson,jdbcType=VARCHAR}, #{number,jdbcType=INTEGER}, #{remark,jdbcType=VARCHAR}, 
      #{inportprice,jdbcType=DOUBLE}, #{providerid,jdbcType=INTEGER}, #{goodsid,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.test.bus.domain.Inport" >
    insert into bus_inport
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="paytype != null" >
        paytype,
      </if>
      <if test="inporttime != null" >
        inporttime,
      </if>
      <if test="operateperson != null" >
        operateperson,
      </if>
      <if test="number != null" >
        number,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="inportprice != null" >
        inportprice,
      </if>
      <if test="providerid != null" >
        providerid,
      </if>
      <if test="goodsid != null" >
        goodsid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="paytype != null" >
        #{paytype,jdbcType=VARCHAR},
      </if>
      <if test="inporttime != null" >
        #{inporttime,jdbcType=VARCHAR},
      </if>
      <if test="operateperson != null" >
        #{operateperson,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        #{number,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="inportprice != null" >
        #{inportprice,jdbcType=DOUBLE},
      </if>
      <if test="providerid != null" >
        #{providerid,jdbcType=INTEGER},
      </if>
      <if test="goodsid != null" >
        #{goodsid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.test.bus.domain.Inport" >
    update bus_inport
    <set >
      <if test="paytype != null" >
        paytype = #{paytype,jdbcType=VARCHAR},
      </if>
      <if test="inporttime != null" >
        inporttime = #{inporttime,jdbcType=VARCHAR},
      </if>
      <if test="operateperson != null" >
        operateperson = #{operateperson,jdbcType=VARCHAR},
      </if>
      <if test="number != null" >
        number = #{number,jdbcType=INTEGER},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="inportprice != null" >
        inportprice = #{inportprice,jdbcType=DOUBLE},
      </if>
      <if test="providerid != null" >
        providerid = #{providerid,jdbcType=INTEGER},
      </if>
      <if test="goodsid != null" >
        goodsid = #{goodsid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.test.bus.domain.Inport" >
    update bus_inport
    set paytype = #{paytype,jdbcType=VARCHAR},
      inporttime = #{inporttime,jdbcType=VARCHAR},
      operateperson = #{operateperson,jdbcType=VARCHAR},
      number = #{number,jdbcType=INTEGER},
      remark = #{remark,jdbcType=VARCHAR},
      inportprice = #{inportprice,jdbcType=DOUBLE},
      providerid = #{providerid,jdbcType=INTEGER},
      goodsid = #{goodsid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!-- 全查询 -->
   <select id="queryAllInport" resultType="cn.test.bus.domain.Inport" parameterType="cn.test.bus.vo.InportVo" >
    select t2.providername as providername,t3.goodsname as goodsname,t3.size as size,t1.* from bus_inport t1 join bus_provider t2 on t1.providerid=t2.id  join bus_goods t3 on t1.goodsid=t3.id
    <where>
    <if test="goodsname!=null">
     and goodsname like "%"#{goodsname}"%"
    </if>
    <if test="providername!=null">
     and providername like "%"#{providername}"%"
    </if>
	<if test="startDate!=null">
		and inporttime >= #{startDate}
	</if>
	<if test="endDate!=null">
		and inporttime <![CDATA[<=]]>#{endDate}
	</if>
	<if test="providerid!=null">
		and t1.providerid=#{providerid}
	</if>
    </where>
    order by inporttime desc
  </select>
  
   <!-- 批量删除 -->
	<delete id="delInports">
		delete from bus_inport
		where id in
		<foreach close=")" collection="array" index="index" item="item" open="(" separator=",">
			#{item}
		</foreach>
	</delete>
</mapper>